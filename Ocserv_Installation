#!/bin/bash
####################################################
#                                                  #
# OpenConnect installation with Let's Encrypt SSL  #
# Version: 1.2.2                                   #
# Author: Soroush Tavanaei                         #
# Github: https://www.github.com/hawaxgit          #
#                                                  #
####################################################

# Check whether it is the root user
if [[ $(id -u) != "0" ]]; then
    printf "\e[42m\e[31mError: You must be root to run this install script.\e[0m\n"
    exit 1
fi

# Detect whether it is CentOS 7 or RHEL 7
if [[ $(grep "release 7." /etc/redhat-release 2>/dev/null | wc -l) -eq 0 ]]; then
    printf "\e[42m\e[31mError: Your OS is NOT CentOS 7 or RHEL 7.\e[0m\n"
    printf "\e[42m\e[31mThis install script is ONLY for CentOS 7 and RHEL 7.\e[0m\n"
    exit 1
fi

# Define the OCPASSWD_FILE
	OCPASSWD_FILE="/etc/ocserv/ocpasswd"

# Funktion zur Anzeige des Menüs
display_menu() {
    clear
    echo "===============<Hawax>================"
    echo " OpenConnect VPN Server Configuration"
    echo "======================================"
    echo "1. One-Click Installation of OpenConnect VPN"
    echo "2. Create VPN User"
    echo "3. Renew SSL Certificate"
    echo "4. Configure Radius and PAM Authentication"
    echo "5. Install radcli for RADIUS Support"
    echo "6. Delete VPN User"
    echo "7. Show VPN Users"
    echo "8. Uninstall Ocserv and Related Components"
    echo "9. Exit"
    echo "======================================"
    read -p "Please choose an option [1-9]: " menu_option
}

# Install required dependencies
	yum install autoconf automake gcc libtasn1-devel zlib zlib-devel trousers trousers-devel gmp-devel gmp xz texinfo libnl-devel libnl tcp_wrappers-libs tcp_wrappers-devel tcp_wrappers dbus dbus-devel ncurses-devel pam-devel readline-devel bison bison-devel flex gcc automake autoconf wget -y


# Funktionen für die Menüoptionen
one_click_install() {
    echo "One-Click Installation of OpenConnect VPN..."
    # Hier Ihre Implementierung einfügen
    if [ "$(id -u)" -ne 0 ]; then
       echo "This script must be run as root" 
       exit 1
    fi

    # Informationen über den Autor, die E-Mail und die Website anzeigen
    echo "############################################################"
    echo " OpenConnect VPN-Server with Let's Encrypt SSL-Certificate"
    echo " Introducing CentOS 7"
    echo " Autor: Soroush at Hawax IT"
    echo " Website: www.hawax.de"
    echo " E-Mail: info@hawax.de"
    echo ""
    echo "############################################################"

    # Nach Domain, E-Mail und Benutzerinformationen fragen
    read -p "Please enter your domain name: " domain_name
    read -p "Please enter your e-mail address: " owner_email
}
# Funktion zum Erstellen des Zertifikats
        create_certificate() {
        echo "Creating the certificate with certbot..."
        certbot certonly --standalone --non-interactive --agree-tos --email "$owner_email" -d "$domain_name"
}

# Funktion zum Installieren von Paketen
    install_packages() {
        echo "Updating and installing packages..."
        sudo yum update -y
        sudo yum upgrade -y
        sudo yum install nano -y
        sudo yum install epel-release -y
        sudo yum install ocserv openssl -y
        sudo yum install certbot -y
        sudo yum install firewalld -y
	yum install -y -q net-tools bind-utils
        yum groupinstall "Development Tools" -y

# Überprüfen, ob alle erforderlichen Pakete installiert sind
        if ! rpm -q ocserv openssl; then
            echo "Required packages could not be installed"
            exit 1
        fi
}

# Funktion zum Installieren von Paketen
    install_packages() {
        echo "Updating and installing packages..."
        sudo yum update -y
        sudo yum upgrade -y
        sudo yum install nano -y
        sudo yum install epel-release -y
        sudo yum install ocserv openssl -y
        sudo yum install certbot -y
        sudo yum install firewalld -y
        yum groupinstall "Development Tools" -y

#Install ocserv dependent components
	yum install -y gnutls gnutls-utils gnutls-devel readline readline-devel \
	libnl-devel libtalloc libtalloc-devel libnl3-devel wget \
	pam pam-devel libtalloc-devel xz libseccomp-devel \
	tcp_wrappers-devel autogen autogen-libopts-devel tar \
	gcc pcre-devel openssl openssl-devel curl-devel \
	freeradius-client-devel freeradius-client lz4-devel lz4 \
	http-parser-devel http-parser protobuf-c-devel protobuf-c \
	pcllib-devel pcllib cyrus-sasl-gssapi dbus-devel policycoreutils gperf

# Überprüfen, ob alle erforderlichen Pakete installiert sind
  if ! rpm -q ocserv openssl; then
     echo "Required packages could not be installed"
      exit 1
  fi
}

# Benutzerpasswortdatei erstellen
	touch "$OCPASSWD_FILE"

# IP-Weiterleitung aktivieren
	echo 'net.ipv4.ip_forward = 1' | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

# SELinux auf "permissive" setzen
    sudo setenforce 0
    sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config


# Funktion zum Aktualisieren der Konfigurationsdatei
    update_config_file() {
        echo "Updating the configuration file..."
        cat <<EOF > /etc/ocserv/ocserv.conf
	auth = "plain[/etc/ocserv/ocpasswd]"
	#auth = "radius [config=/usr/local/etc/radcli/radiusclient.conf,groupconfig=true]"
	#acct = "radius [config=/usr/local/etc/radcli/radiusclient.conf,groupconfig=true]"
	#auth = "pam"
	tcp-port = 510
	udp-port = 510
	run-as-user = nobody
	run-as-group = daemon
	socket-file = /var/run/ocserv-socket
	server-cert = /etc/letsencrypt/live/$domain_name/fullchain.pem
	server-key = /etc/letsencrypt/live/$domain_name/privkey.pem
	ca-cert = /etc/letsencrypt/live/$domain_name/chain.pem
	#cert-user-oid = 0.9.2342.19200300.100.1.1
	tls-priorities = "NORMAL:%SERVER_PRECEDENCE:%COMPAT:-VERS-SSL3.0"
	auth-timeout = 240
	min-reauth-time = 60
	max-ban-score = 50
	ban-reset-time = 300
	cookie-timeout = 300
	deny-roaming = false
	rekey-time = 172800
	rekey-method = ssl
	use-utmp = true
	pid-file = /var/run/ocserv.pid
	device = vpns
	predictable-ips = true
	ipv4-network = 192.168.1.0
	ipv4-netmask = 255.255.255.0
	dns = 8.8.8.8
	dns = 8.8.4.4
	route = default
	pre-login-banner = "Open up the web - https://github.com/hawaxgit/"
	EOF
}

# Funktion zum Konfigurieren der Firewall
    configure_firewall() {
        echo "Configuring the firewall..."
        sudo systemctl start firewalld
        sudo systemctl enable firewalld
        sudo firewall-cmd --add-masquerade
        sudo firewall-cmd --permanent --add-masquerade
        sudo firewall-cmd --zone=public --add-service={http,https} --permanent
        sudo firewall-cmd --zone=public --add-port={22,80,443,510}/tcp --permanent
        sudo firewall-cmd --zone=public --add-port={22,80,443,510}/udp --permanent
        sudo firewall-cmd --reload
        echo "Firewall configured successfully"
}

create_vpn_user() {
    echo "Creating VPN user..."
    # Hier Ihre Implementierung einfügen
}

renew_ssl_certificate() {
    echo "Renewing SSL certificate..."
    # Hier Ihre Implementierung einfügen
}

configure_radius_pam_auth() {
    echo "Configuring Radius and PAM authentication..."
    # Configure pam_radius
    if [ ! -d "/lib/security/" ]; then
        mkdir -p /lib/security/
    fi
    echo "auth required /lib/security/pam_radius_auth.so" >> /etc/pam.d/ocserv
    echo "account required /lib/security/pam_radius_auth.so" >> /etc/pam.d/ocserv
    echo "session required /lib/security/pam_radius_auth.so" >> /etc/pam.d/ocserv

    # Configure ocserv
    sed -i 's/^auth = "plain\[passwd=\/etc\/ocserv\/ocpasswd\]"/#auth = "plain[passwd=\/etc\/ocserv\/ocpasswd]"/g' /etc/ocserv/ocserv.conf
    sed -i 's/^#auth = "pam"/auth = "pam"/g' /etc/ocserv/ocserv.conf
    systemctl restart ocserv
    echo "Radius and PAM authentication configured successfully"
}

install_radcli() {
    echo "Installing radcli for RADIUS support..."
    # Function to install radcli for RADIUS support
install_radcli() {
    echo "Installing radcli for RADIUS support..."
    yum install -y radcli
    if [ $? -eq 0 ]; then
        echo "radcli successfully installed!"
    else
        echo "Failed to install radcli."
    fi
    read -p "Press Enter to continue..."
}


delete_vpn_user() {
    echo "Deleting VPN user..."
    # Hier Ihre Implementierung einfügen
}

show_vpn_users() {
    echo "Showing VPN users..."
    # Hier Ihre Implementierung einfügen
}

uninstall_ocserv() {
    echo "Uninstalling Ocserv and related components..."
    # Hier Ihre Implementierung einfügen
}

# Hauptmenü-Schleife
while true; do
    display_menu

    case "$menu_option" in
        1) one_click_install ;;
        2) create_vpn_user ;;
        3) renew_ssl_certificate ;;
        4) configure_radius_pam_auth ;;
        5) install_radcli ;;
        6) delete_vpn_user ;;
        7) show_vpn_users ;;
        8) uninstall_ocserv ;;
        9) echo "Exiting..."; exit 0 ;;
        *) echo "Invalid option. Please choose a valid option." ;;
    esac
done
